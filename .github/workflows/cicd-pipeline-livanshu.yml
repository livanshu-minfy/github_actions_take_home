# .github/workflows/cicd-pipeline-livanshu.yml
name: Full CI/CD Pipeline

on:
  push:
    branches: [ "main" ] # Trigger on push to main
  workflow_dispatch: # Allow manual triggers

env:
  # Define a variable for the image name to avoid repetition
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  # JOB 1: Build the Docker image and push it to a registry
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions: # Grant special permissions to the GITHUB_TOKEN for this job
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Pass the commit SHA as a build argument to the Dockerfile
          build-args: |
            APP_VERSION=${{ github.sha }}

  # JOB 2: Deploy the image to our server
  deploy:
    name: Deploy to EC2
    needs: build # This is critical: The 'deploy' job will ONLY run if 'build' succeeds.
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 instance via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Login to GHCR on the EC2 instance
            echo ${{ secrets.GITHUB_TOKEN }} | sudo docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            # Best practice: Pull the image using the unique commit SHA tag
            # This ensures we deploy the exact image we just built, not a generic 'latest' tag
            sudo docker pull ${{ env.IMAGE_NAME }}@${{ steps.meta.outputs.digest }}

            # Stop and remove the old container to avoid port conflicts
            sudo docker stop my-app-container || true
            sudo docker rm my-app-container || true

            # Run a new container from the new image
            sudo docker run -d --name my-app-container --restart always -p 3000:3000 ${{ env.IMAGE_NAME }}@${{ steps.meta.outputs.digest }}

            # Clean up old, unused Docker images to save disk space
            sudo docker image prune -a -f
